给定一个包含 n 个整数的数组?nums，判断?nums?中是否存在三个元素 a，b，c ，使得?a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

//暴力解法，非正确答案，耗时太大。
class Solution {
public:
    vector<vector<int> > threeSum(vector<int>& nums) {
        vector<vector<int> > result;//存储结果
		vector<int>temp;
		int len=nums.size();
		if(len<=2) return result;//数组元素小于3,退出
		sort(nums.begin(),nums.end());//排序
        int m=0;
		int i,j,k,sum;
        for( i=0;i<nums.size()-2;i++){
			if(nums[i]>0) break;//如果元素大于0，退出
			if(nums[i]==nums[i-1&&i>0])continue;//遇到重复元素，退出当前循环
            for( j=i+1;j<nums.size()-1;j++){
				if(nums[j]==nums[j-1]&j>i+1)continue;//遇到重复元素，退出当前循环
                for( k=j+1;k<nums.size();k++){
					sum=nums[i]+nums[j]+nums[k];
                    if(0==sum){
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[k]);
						result.push_back(temp);
						temp.clear(); 
                    }
                }
            }
        }
		return result;   
    }

分析：
解答
对整个数组排序，先遍历数组取三数中的第一个数nums[i]，注意num[i]只到数组的倒数第三个元素，然后剩下两个数需要满足条件target = 0 - nums[i],这两个数在数组中num[i]后面部分，维持两个双指针l和r，令tmp = nums[l] + nums[r]，处理情况如下：

如果tmp < target，则l右移一步；
如果tmp > target，则r左移一步；
否则，满足条件，添加两个数到结果数组中，同时将l和r分别右移和左移到下一个不重复的元素处。
注意：遍历数组的时候取第一个数的时候过滤重复元素，可以提高查找效率

时间复杂度：O(n2)
空间复杂度：O(1)
代码如下：
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int len = nums.size();
        if(len < 3)
            return vector<vector<int>>();
        
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        for(int i=0;i<len-2;i++)
        {
            if(i == 0 || (i > 0 && nums[i] != nums[i-1]))
            {
                int l = i+1;
                int r = len-1;
                int target = 0 - nums[i];
                while(l < r)
                {
                    int tmp = nums[l] + nums[r];
                    if(target > tmp)
                    {
                        l++;
                    }
                    else if(target < tmp)
                    {
                        r--;
                    }
                    else{
                        res.push_back({nums[i],nums[l],nums[r]});
                        l++;
                        r--;
                        while(l < r && nums[l] == nums[l-1])
                            l++;
                        while(l < r && nums[r] == nums[r+1])
                            r--;
                    }
                }
                
            }
        }
        
        return res;
    }
};
